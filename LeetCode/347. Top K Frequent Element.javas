Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

CODE:

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map  = new HashMap<>();
        for(int i:nums){
            map.put(i,map.getOrDefault(i,0)+1);
        }
        int arr[] = new int[k];
        for(int i=0;i<k;i++){
            int max = 0;
            int key = 0;
            for(int j:map.keySet()){
               if(map.get(j)>max){
                max = map.get(j);
                key = j;
               } 
            }
            arr[i] = key;
            map.remove(key);
        }
        return arr;
    }
}

OUTPUT:

Runtime
60
ms
Beats
5.09%
